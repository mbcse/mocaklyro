generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Session model to group messages and character files
model User {
  id           String         @id @default(uuid())
  githubId     String?        @unique // Made optional to allow AIR-only users
  airDid       String?        @unique // AIR DID for AIR-based users
  airUserId    String?        @unique // AIR User ID for AIR-based users
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  wallets      Wallet[]
  githubData   GithubData?
  contractsData ContractsData?
  onchainData  OnchainData?
  userScore    UserScore?
  lastFetchedAt DateTime?
  dataStatus   DataStatus?
  developerWorth  DeveloperWorth?
  email String  @default("")
  
  // KlyroGate verifications
  klyroGateVerifications KlyroGateVerification[]
  
  // AIR Credentials
  credential   UserCredential?

}

model Wallet {
  id              String          @id
  address         String          
  chainType       String
  chainId         String
  userId          String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

} 

model GithubData {
  id String @id @default(uuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userInfo Json
  repos Json
  orgs Json
  languagesData Json
  status DataStatus @default(PENDING)
  lastFetchedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContractsData {
  id String @id @default(uuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  contracts Json
  status DataStatus @default(PENDING)
  lastFetchedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OnchainData {
  id String @id @default(uuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  history Json
  status DataStatus @default(PENDING)
  lastFetchedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contractStats Json
  transactionStats Json
  hackathonData Json?
}

model UserScore {
  id String @id @default(uuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalScore Float @default(0)
  metrics Json // Stores individual metric scores and calculations
  status DataStatus @default(PENDING)
  lastScore Float? @default(0)
  lastCalculatedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlatformConfig {
  id String @id @default(uuid())
  name String @unique
  description String?
  thresholds Json
  weights Json
  enabledChains Json
  developerWorthMultipliers Json
  cryptoRepos Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeveloperWorth {
    id              String   @id @default(cuid())
    userId          String   @unique
    totalWorth      Float
    breakdown       Json
    details         Json
    lastWorth Float? @default(0)
    lastCalculatedAt DateTime
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    user            User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model Partner {
  id            String       @id @default(uuid())
  email         String       @unique
  passwordHash  String
  firstName     String?
  lastName      String?
  isActive      Boolean      @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  organizations Organization[]
  
  @@map("partners")
}

model Organization {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  logoUrl     String?
  website     String?
  contactEmail String?
  partnerId   String?  // Partner who owns this organization (optional for now)
  partner     Partner? @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Add relation to KlyroGates
  klyroGates  KlyroGate[]
}

// New model for KlyroGate pages created by partners
model KlyroGate {
  id                String   @id @default(uuid())
  name              String   // Name of the gate (e.g., "ETH Global Hackathon 2025")
  slug              String   @unique // URL slug for the gate
  description       String?
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Configuration
  isActive          Boolean  @default(true)
  allowSelfVerify   Boolean  @default(true) // Allow users to verify themselves
  requiresApproval  Boolean  @default(false) // Require manual approval
  maxVerifications  Int?     // Optional limit on number of verifications
  
  // Styling/Branding
  bannerUrl         String?
  primaryColor      String?  @default("#6366f1") // Default indigo
  customMessage     String?
  
  // Post-verification actions
  actionType        String?  // "redirect", "api_call", "none"
  actionUrl         String?  // URL for redirect or API endpoint
  actionMethod      String?  @default("POST") // HTTP method for API calls
  actionHeaders     String?  // JSON string of headers for API calls
  actionPayload     String?  // JSON template for API payload
  successMessage    String?  // Custom success message
  
  // Timestamps
  expiresAt         DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  credentialRequirements KlyroGateCredentialRequirement[]
  verifications     KlyroGateVerification[]
  
  @@map("klyro_gates")
}

// Define what credentials are required for a KlyroGate
model KlyroGateCredentialRequirement {
  id           String    @id @default(uuid())
  klyroGateId  String
  klyroGate    KlyroGate @relation(fields: [klyroGateId], references: [id], onDelete: Cascade)
  
  // Credential requirements
  credentialType    String  // e.g., "github_commits", "solidity_experience", "salary_range"
  programId         String  // AIR program ID for this specific requirement
  minValue          Float?  // Minimum value required (e.g., min salary)
  maxValue          Float?  // Maximum value required 
  stringValue       String? // For string-based requirements
  isRequired        Boolean @default(true)
  
  createdAt    DateTime @default(now())
  
  @@map("klyro_gate_credential_requirements")
}

// Track user verifications for KlyroGates
model KlyroGateVerification {
  id           String    @id @default(uuid())
  klyroGateId  String
  klyroGate    KlyroGate @relation(fields: [klyroGateId], references: [id], onDelete: Cascade)
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Verification status
  status       VerificationStatus @default(PENDING)
  verifiedAt   DateTime?
  rejectedAt   DateTime?
  rejectionReason String?
  
  // Credential verification results
  credentialResults Json? // Store which credentials passed/failed
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([klyroGateId, userId]) // One verification per user per gate
  @@map("klyro_gate_verifications")
}

// AIR Credential model for storing issued credentials
model UserCredential {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // AIR Credential info
  credentialId    String?  // AIR credential ID
  issuerDid       String?  // AIR issuer DID
  credentialHash  String?  // Credential hash from AIR
  status          CredentialStatus @default(PENDING)
  
  // Credential subject data (stored as JSON)
  credentialSubject Json?
  
  // Timestamps
  issuedAt        DateTime?
  expiresAt       DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("user_credentials")
}

enum CredentialStatus {
  PENDING
  ISSUED
  VERIFIED
  REVOKED
  EXPIRED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

enum DataStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

